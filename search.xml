<?xml version="1.0" encoding="utf-8"?>
<search>
  <entry>
    <title>SpringBoot配置文件</title>
    <url>/2019/12/17/SpringBoot%E9%85%8D%E7%BD%AE%E6%96%87%E4%BB%B6/</url>
    <content><![CDATA[<h1 id="SpringBoot配置文件"><a href="#SpringBoot配置文件" class="headerlink" title="SpringBoot配置文件"></a>SpringBoot配置文件</h1><h2 id="1、配置文件"><a href="#1、配置文件" class="headerlink" title="1、配置文件"></a>1、配置文件</h2><p>SpringBoot使用一个全局的配置文件，配置文件名是固定的。</p>
<ul>
<li>application.properties</li>
<li><strong>application.yml</strong><br>配置文件的作用：修改SpringBoot的自动配置的默认值；SpringBoot在底层都给我们自动配置好<br>YAML(YAML Ain’t Markup Language)</li>
<li>YAML A Markup Language：是一个标记语言</li>
<li>YAML isn‘t Markup Language：不是一个标记语言<br>标记语言：</li>
<li>以前的配置文件大多是xml文件</li>
<li>YAML：<strong>以数据为中心</strong>，比json、xml等更适合做配置文件<br>YAML配置例子</li>
</ul>
<pre><code class="yaml">server:
  port: 8081</code></pre>
<p>​        XML：</p>
<pre><code class="xml">&lt;server&gt;
    &lt;port&gt;8081&lt;/port&gt;
&lt;/server&gt;</code></pre>
<h2 id="2、YAML语法"><a href="#2、YAML语法" class="headerlink" title="2、YAML语法"></a>2、YAML语法</h2><h3 id="1、基本语法"><a href="#1、基本语法" class="headerlink" title="1、基本语法"></a>1、基本语法</h3><p>k:(<strong>空格</strong>)v：表示一对键值对（空格必须有）；<br>以空格的缩进控制层级关系；只要是左对齐的一列数据，都是同一个层级的</p>
<h3 id="2、值的写法"><a href="#2、值的写法" class="headerlink" title="2、值的写法"></a>2、值的写法</h3><p><strong>字面量：普通的值（数字、字符串、布尔）</strong><br>​    k:v ：字面直接来写<br>​              字符串默认不用加上单引号或者双引号<br>​                “”：双引号；不会转义字符串里面的特殊字符；特殊字符会作为本身想表示的意思<br>​                            name：”zhangsan \n lisi”： 输出，zhangsan 换行 lisi<br>​                ‘’：单引号；会转义特殊字符，特殊字符最终只是个普通的字符串数据<br>​                            name：’zhangsan \n lisi‘：输出，zhangsan \n lisi<br><strong>对象、Map</strong><br>​    k:v：</p>
<pre><code class="yaml">friends:
    lastName: zhangsan
    age: 18</code></pre>
<p>行内写法</p>
<pre><code class="yaml">friends: {lastName: zhangsan,age: 18}</code></pre>
<p><strong>数组</strong></p>
<pre><code class="yaml">pets
 - cat
 - dog
 - pig</code></pre>
<p>行内写法</p>
<pre><code class="yaml">pets: [cat,dog,pig]</code></pre>
<h2 id="3、配置文件值注入"><a href="#3、配置文件值注入" class="headerlink" title="3、配置文件值注入"></a>3、配置文件值注入</h2><h3 id="1、yaml配置文件"><a href="#1、yaml配置文件" class="headerlink" title="1、yaml配置文件"></a><strong>1、yaml配置文件</strong></h3><pre><code class="yaml">person:
    lastName: hello
    age: 18
    boss: false
    birth: 2019/11/11
    maps: {k1: v1,k2: 12}
    lists:
      - lisi
      - zhaoliu
    dog:
      name: 小狗
      age: 12</code></pre>
<p><strong>JavaBean</strong></p>
<pre><code class="Java">/**
 * 将配置文件中配置的每一个属性的值，映射到这个组件中（默认从全局配置文件中获取值）
 * @ConfigurationProperties: 告诉springboot将本类中的所有属性和配置文件中的相关的配置进行绑定
 *      prefix = &quot;person&quot;：配置文件中在哪个下面的属性进行一一映射
 *
 *只有这个组件是容器中的组件，才能使用容器提供的@ConfigurationProperties的功能
 */
@Component
@ConfigurationProperties(prefix = &quot;person&quot;)
public class Person {

    private String lastName;
    private Integer age;
    private  Boolean boss;
    private Date birth;

    private Map&lt;String,Object&gt; maps;
    private List&lt;Object&gt; lists;
    private Dog dog;</code></pre>
<p>导入配置文件处理器，以后编写配置就有提示了</p>
<pre><code class="xml">&lt;!--导入配置文件处理器，配置文件进行绑定就会有提示--&gt;
        &lt;dependency&gt;
            &lt;groupId&gt;org.springframework.boot&lt;/groupId&gt;
            &lt;artifactId&gt;spring-boot-configuration-processor&lt;/artifactId&gt;
            &lt;optional&gt;true&lt;/optional&gt;
        &lt;/dependency&gt;
</code></pre>
<h3 id="2、properties配置文件"><a href="#2、properties配置文件" class="headerlink" title="2、properties配置文件"></a><strong>2、properties配置文件</strong></h3><pre><code class="properties">#idea使用的是utf-8
#file-encoding

person.last-name=张三
person.age=18
person.maps.k1=v1
person.maps.k2=14
person.lists=a,b,c
person.dog.name=dog
person.dog.age=15

</code></pre>
<p>会有乱码问题，ctrl + alt + s 快捷键去setting界面 输入 file-encoding</p>
<p><img src="/2019/12/17/SpringBoot%E9%85%8D%E7%BD%AE%E6%96%87%E4%BB%B6/image-20191217182412029.png" alt="image-20191217182412029"></p>
<h3 id="3、-Value获取值和-ConfigurationProperties获取值比较"><a href="#3、-Value获取值和-ConfigurationProperties获取值比较" class="headerlink" title="3、@Value获取值和@ConfigurationProperties获取值比较"></a>3、@Value获取值和@ConfigurationProperties获取值比较</h3><table>
<thead>
<tr>
<th></th>
<th>@ConfigurationProperties</th>
<th>@Value</th>
</tr>
</thead>
<tbody><tr>
<td>功能</td>
<td>批量注入配置文件中的属性</td>
<td>一个个指定</td>
</tr>
<tr>
<td>松散绑定（松散语法）</td>
<td>支持</td>
<td>不支持</td>
</tr>
<tr>
<td>SpEL</td>
<td>不支持</td>
<td>支持</td>
</tr>
<tr>
<td>JSR303数据校验</td>
<td>支持</td>
<td>不支持</td>
</tr>
<tr>
<td>复杂类型封装</td>
<td>支持</td>
<td>不支持</td>
</tr>
</tbody></table>
<p>如果说，我们只是在某个业务逻辑中需要获取一下配置文件中的某项值，使用@Value。</p>
<p>如果说，我们专门编写了一个JavaBean来和配置文件进行映射，我们就直接使用@ConfigurationProperties</p>
<h3 id="4、配置文件注入值数据校验"><a href="#4、配置文件注入值数据校验" class="headerlink" title="4、配置文件注入值数据校验"></a>4、配置文件注入值数据校验</h3><pre><code class="Java">@Component
@ConfigurationProperties(prefix = &quot;person&quot;)
@Validated
public class Person {

    /**
     * &lt;bean class=&quot;Person&quot;&gt;
     *      &lt;property name=&quot;lastName&quot; value=&quot;字面量/${key}从环境变量、配置文件中获取值&quot;/#                        {SpEL}&gt;
     &lt;/property&gt;
     * &lt;/bean&gt;
     */
    @Email
  //@Value(&quot;${person.last-name}&quot;)
    private String lastName;
    @Value(&quot;#{11*2}&quot;)
    private Integer age;
    @Value(&quot;true&quot;)
    private  Boolean boss;
    private Date birth;

    private Map&lt;String,Object&gt; maps;
    private List&lt;Object&gt; lists;
    private Dog dog;</code></pre>
<h3 id="5、-PropertySource-amp-ImportResource"><a href="#5、-PropertySource-amp-ImportResource" class="headerlink" title="5、@PropertySource&amp;@ImportResource"></a>5、@PropertySource&amp;@ImportResource</h3><p>@PropertySource：加载指定的配置文件；</p>
<pre><code class="Java">/**
 * 将配置文件中配置的每一个属性的值，映射到这个组件中
 * @ConfigurationProperties: 告诉springboot将本类中的所有属性和配置文件中的相关的配置进行绑定
 *      prefix = &quot;person&quot;：配置文件中在哪个下面的属性进行一一映射
 *
 *只有这个组件是容器中的组件，才能使用容器提供的@ConfigurationProperties的功能
 */

@PropertySource(value = {&quot;classpath:person.properties&quot;})
@Component
@ConfigurationProperties(prefix = &quot;person&quot;)
//@Validated
public class Person {

    /**
     * &lt;bean class=&quot;Person&quot;&gt;
     *      &lt;property name=&quot;lastName&quot; value=&quot;字面量/${key}从环境变量、配置文件中获取值&quot;/#{SpEL}&gt;&lt;/property&gt;
     * &lt;/bean&gt;
     */
//    @Email
  //@Value(&quot;${person.last-name}&quot;)
    private String lastName;
//    @Value(&quot;#{11*2}&quot;)
    private Integer age;
//    @Value(&quot;true&quot;)
    private  Boolean boss;
    private Date birth;

    private Map&lt;String,Object&gt; maps;
    private List&lt;Object&gt; lists;
    private Dog dog;
</code></pre>
<p>@ImportResource：导入spring的配置文件，让配置文件里面的内容生效；<br>SpringBoot里面没有Spring的配置文件，我们自己编写的配置文件，也不能自动识别；<br>想让Spring的配置文件生效，加载进来；@ImportResource标注在一个配置类上</p>
<pre><code class="Java">@ImportResource(locations = {&quot;classpath:beans.xml&quot;})//导入Spring的配置文件让其生效
@SpringBootApplication
public class DemoApplication {

    public static void main(String[] args) {
        SpringApplication.run(DemoApplication.class, args);
    }

}</code></pre>
<p>不来编写Spring的配置文件</p>
<pre><code class="xml">&lt;?xml version=&quot;1.0&quot; encoding=&quot;UTF-8&quot;?&gt;
&lt;beans xmlns=&quot;http://www.springframework.org/schema/beans&quot;
       xmlns:xsi=&quot;http://www.w3.org/2001/XMLSchema-instance&quot;
       xsi:schemaLocation=&quot;http://www.springframework.org/schema/beans http://www.springframework.org/schema/beans/spring-beans.xsd&quot;&gt;

    &lt;bean id=&quot;helloService&quot; class=&quot;com.syj.service.HelloService&quot;&gt;&lt;/bean&gt;
&lt;/beans&gt;
</code></pre>
<p>SpringBoot推荐给容器中添加组件的方式：使用全注解方式<br>1、配置类======Spring配置文件<br>2、使用@Bean给容器中添加组件<br>​     <strong>TestApplication.class必须和@Configuration注解的配置类在同一包中，不然就加载不了这个配置类</strong></p>
<pre><code class="Java">/**
 * @Configuration 指明当前类就是个配置类；就是来替代之前的Spring配置文件
 *
 * 在配置文件中用&lt;bean&gt;&lt;/bean&gt;标签添加组件
 */
@Configuration
public class MyAppConfig {

    //将方法的返回值添加到容器中；容器中默认的id就是方法名
    @Bean
    public HelloService helloService() {
        System.out.println(&quot;配置类给容器中添加组件了&quot;);
        return new HelloService();
    }
}
</code></pre>
<h2 id="4、配置文件占位符"><a href="#4、配置文件占位符" class="headerlink" title="4、配置文件占位符"></a>4、配置文件占位符</h2><h3 id="1、随机数"><a href="#1、随机数" class="headerlink" title="1、随机数"></a>1、随机数</h3><pre><code class="Java">${random.value}
</code></pre>
<h3 id="2、占位符获取之前配置的值，如果没有可以用-指定默认值"><a href="#2、占位符获取之前配置的值，如果没有可以用-指定默认值" class="headerlink" title="2、占位符获取之前配置的值，如果没有可以用:指定默认值"></a>2、占位符获取之前配置的值，如果没有可以用:指定默认值</h3><pre><code class="properties">#idea使用的是utf-8
#file-encoding
person.last-name=张三${random.uuid}
person.age=${random.int}
person.maps.k1=v1
person.maps.k2=14
person.lists=a,b,c
person.dog.name=${person.hello:hello}_dog
person.dog.age=15
</code></pre>
<h2 id="5、Profile"><a href="#5、Profile" class="headerlink" title="5、Profile"></a>5、Profile</h2><h3 id="1、多Profile文件"><a href="#1、多Profile文件" class="headerlink" title="1、多Profile文件"></a>1、多Profile文件</h3><p>我们在主配置文件编写的时候，文件名可以是 application-{profile}.properties.yml<br>默认使用application.properties的配置；</p>
<h3 id="2、yml支持多文档块方式"><a href="#2、yml支持多文档块方式" class="headerlink" title="2、yml支持多文档块方式"></a>2、yml支持多文档块方式</h3><pre><code class="yml">server:
  port: 8081
spring:
  profiles:
    active: dev
---
server:
  port: 8083
spring:
  profiles: dev
---
server:
  port: 8084
spring:
  profiles: prod
---</code></pre>
<h3 id="3、激活指定profile"><a href="#3、激活指定profile" class="headerlink" title="3、激活指定profile"></a>3、激活指定profile</h3><p>​    1、在配置文件中指定 spring.profiles.active=dev<br>​    2、命令行<br>​            –spring.profiles.active=dev<br>​    3、虚拟机参数<br>​            -Dspring.profiles.active=dev</p>
]]></content>
      <categories>
        <category>专业知识</category>
      </categories>
      <tags>
        <tag>Java</tag>
        <tag>SpringBoot</tag>
      </tags>
  </entry>
</search>
